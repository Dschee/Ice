//
//  Package.swift
//  Bark
//
//  Created by Jake Heiser on 7/21/17.
//

import Foundation
// import Files

public class Package {
    
    public var name: String
    public var dependencies: [Dependency]
    public var targets: [Target]

    // var folder: Folder {

    // }
    
    public struct Dependency {
        public let url: String
        public let major: Int
        public let minor: Int
        
        public init(url: String, major: Int, minor: Int) {
            self.url = url
            self.major = major
            self.minor = minor
        }
        
        public init(dumped: DumpedPackage.Dependency) {
            self.url = dumped.url
            let version = Version(dumped.version.lowerBound)!
            self.major = version.major
            self.minor = version.minor
        }
    }
    
    public struct Target {

    }
    
    public init(directory: String = ".") throws {
        let dumped = try DumpedPackage.load(directory: directory)
        self.name = dumped.name
        self.dependencies = dumped.dependencies.map(Dependency.init)
        self.targets = []
    }

//    func createTarget(name: String, dependencies: [String]) -> Target {
//
//    }

    func write() throws {
        var lines = [
            "// Autogenerated using ice",
            "",
            "import PackageDescription",
            "",
            "let package = Package(name: \(name.quoted))",
            ""
        ]
        
        if !dependencies.isEmpty {
            lines.append("package.dependencies = [")
            for (index, dep) in dependencies.enumerated() {
                var line = "    .Package(url: \(dep.url.quoted), majorVersion: \(dep.major), minor: \(dep.minor))"
                if index < dependencies.count - 1 {
                    line.append(",")
                }
                lines.append(line)
            }
            lines.append("]")
        }
        
        let file = lines.joined(separator: "\n")
        try file.write(toFile: "Package.swift", atomically: true, encoding: .utf8)
    }
    
}

public struct DumpedPackage: Decodable {
    
    public struct Dependency: Decodable {
        let url: String
        let version: Version
        
        struct Version: Decodable {
            let lowerBound: String
            let upperBound: String
        }
    }
    
    let name: String
    let dependencies: [Dependency]
    let targets: [String]
    let exclude: [String]
    
    static func load(directory: String) throws -> DumpedPackage {
        var output = try SPM(path: directory).dumpPackage()
        guard let jsonStart = output.index(of: UInt8("{".cString(using: .ascii)![0])) else {
            throw SwiftProcess.Error.processFailed
        }
        output = output.subdata(in: jsonStart..<output.endIndex)
        
        return try JSONDecoder().decode(DumpedPackage.self, from: output)
    }
    
}

